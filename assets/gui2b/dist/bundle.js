/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/* no static exports found */
/* exports used: default */
/*!************************************!*\
  !*** ./~/furhat-gui/dist/index.js ***!
  \************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Furhat = void 0;\nconst furhat_core_1 = __importDefault(__webpack_require__(/*! furhat-core */ 1));\nexports.Furhat = furhat_core_1.default;\nlet furhat;\nlet portNumber;\n/**\n * FurhatGUI Function which sets up a connection to the furhat skill and gives\n * the furhat object to send and recieve events to the skill.\n * @return Promise that will return the promise with a `Furhat` obkect\n */\nconst FurhatGUI = () => new Promise((resolve, reject) => {\n    window.fetch('/port', { method: 'GET' }) // eslint-disable-line no-undef\n        .then(r => r.json())\n        .then(({ address, port }) => {\n        portNumber = port;\n        furhat = new furhat_core_1.default(address, port, 'api');\n        return furhat.init();\n    })\n        .then(() => {\n        const senseSkillGuiEvent = {\n            event_name: 'furhatos.event.senses.SenseSkillGUIConnected',\n            port: portNumber,\n        };\n        furhat.send(senseSkillGuiEvent);\n        resolve(furhat);\n    })\n        .catch((error) => reject(`Something went wrong: ${error}`));\n});\nexports.default = FurhatGUI;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vZnVyaGF0LWd1aS9kaXN0L2luZGV4LmpzPzJkNDIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZ1cmhhdCA9IHZvaWQgMDtcbmNvbnN0IGZ1cmhhdF9jb3JlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImZ1cmhhdC1jb3JlXCIpKTtcbmV4cG9ydHMuRnVyaGF0ID0gZnVyaGF0X2NvcmVfMS5kZWZhdWx0O1xubGV0IGZ1cmhhdDtcbmxldCBwb3J0TnVtYmVyO1xuLyoqXG4gKiBGdXJoYXRHVUkgRnVuY3Rpb24gd2hpY2ggc2V0cyB1cCBhIGNvbm5lY3Rpb24gdG8gdGhlIGZ1cmhhdCBza2lsbCBhbmQgZ2l2ZXNcbiAqIHRoZSBmdXJoYXQgb2JqZWN0IHRvIHNlbmQgYW5kIHJlY2lldmUgZXZlbnRzIHRvIHRoZSBza2lsbC5cbiAqIEByZXR1cm4gUHJvbWlzZSB0aGF0IHdpbGwgcmV0dXJuIHRoZSBwcm9taXNlIHdpdGggYSBgRnVyaGF0YCBvYmtlY3RcbiAqL1xuY29uc3QgRnVyaGF0R1VJID0gKCkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHdpbmRvdy5mZXRjaCgnL3BvcnQnLCB7IG1ldGhvZDogJ0dFVCcgfSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuICAgICAgICAudGhlbihyID0+IHIuanNvbigpKVxuICAgICAgICAudGhlbigoeyBhZGRyZXNzLCBwb3J0IH0pID0+IHtcbiAgICAgICAgcG9ydE51bWJlciA9IHBvcnQ7XG4gICAgICAgIGZ1cmhhdCA9IG5ldyBmdXJoYXRfY29yZV8xLmRlZmF1bHQoYWRkcmVzcywgcG9ydCwgJ2FwaScpO1xuICAgICAgICByZXR1cm4gZnVyaGF0LmluaXQoKTtcbiAgICB9KVxuICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNlbnNlU2tpbGxHdWlFdmVudCA9IHtcbiAgICAgICAgICAgIGV2ZW50X25hbWU6ICdmdXJoYXRvcy5ldmVudC5zZW5zZXMuU2Vuc2VTa2lsbEdVSUNvbm5lY3RlZCcsXG4gICAgICAgICAgICBwb3J0OiBwb3J0TnVtYmVyLFxuICAgICAgICB9O1xuICAgICAgICBmdXJoYXQuc2VuZChzZW5zZVNraWxsR3VpRXZlbnQpO1xuICAgICAgICByZXNvbHZlKGZ1cmhhdCk7XG4gICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnJvcikgPT4gcmVqZWN0KGBTb21ldGhpbmcgd2VudCB3cm9uZzogJHtlcnJvcn1gKSk7XG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IEZ1cmhhdEdVSTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9mdXJoYXQtZ3VpL2Rpc3QvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/* no static exports found */
/* all exports used */
/*!*************************************!*\
  !*** ./~/furhat-core/dist/index.js ***!
  \*************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Furhat main class. Maintains the websocket connection to furhatOS and\n * has methods to send events, subscribe to events and helper methods such as say,\n * gesture, etc.\n *\n * @param domain IP Address for furhatOS - localhost if SDK.\n * @param port port for RealTimeAPI module of furhatOS.\n * @param route route for RealTimeAPI module of furhatOS.\n */\nclass Furhat {\n    constructor(domain, port, route) {\n        this.eventFunctions = {};\n        this.domain = domain;\n        this.port = port;\n        this.route = route;\n    }\n    /**\n     * Initializes the connection and return a promise. Await for the promise to resolve before\n     * using the object\n     */\n    init() {\n        return new Promise((resolve, reject) => {\n            this.socket = new WebSocket(`ws://${this.domain}:${this.port}/${this.route}`);\n            this.socket.onopen = () => {\n                resolve({ error: false, message: \"Success\" });\n            };\n            this.socket.onmessage = (message) => {\n                const event = JSON.parse(message.data);\n                // If a callback is available then call it\n                this.eventFunctions[event.event_name] !== undefined &&\n                    this.eventFunctions[event.event_name](event);\n            };\n            this.socket.onerror = () => {\n                reject({ error: true, message: \"Error while opening socket\" });\n            };\n        });\n    }\n    /**\n     * Method to set a callback that will be triggered `onerror` of the underlying websocket\n     * @param callback Callback function to be trigger on WebSocket connection error\n     */\n    onConnectionError(callback) { this.socket && (this.socket.onerror = callback); }\n    /**\n     * Method to set a callback that will be triggered `onclose` of the underlying websocket\n     * @param callback Callback function to be trigger on WebSocket connection close\n     */\n    onConnectionClose(callback) { this.socket && (this.socket.onclose = callback); }\n    /**\n     * Sends an event to furhatOS\n     * @param event Object containing the event. Mandtory to have event_name parameter in the object\n     */\n    send(event) {\n        var _a, _b, _c;\n        if (((_a = this.socket) === null || _a === void 0 ? void 0 : _a.readyState) === 2 || ((_b = this.socket) === null || _b === void 0 ? void 0 : _b.readyState) === 3) {\n            console.warn(\"Cannot send event. Socket is not ready.\");\n            return false;\n        }\n        else if (((_c = this.socket) === null || _c === void 0 ? void 0 : _c.readyState) === 1) {\n            this.socket.send(JSON.stringify(event));\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Subscribes to the given event and triggers the supplied callback on event\n     * @param eventName Name of the event to subscribe\n     * @param callback Function which needs to be triggered when the given event is recieved\n     * @param dontSend [Optional] [false by default] Boolean which determines wether to send\n     * the subscribe event or not. use it to set callbacks for event that are already subscribed to,\n     * for instance with group subscriptions\n     */\n    subscribe(eventName, callback, dontSend = false) {\n        const event = { event_name: 'furhatos.event.actions.ActionRealTimeAPISubscribe', name: eventName };\n        this.eventFunctions[eventName] = callback;\n        if (!dontSend) {\n            return this.send(event);\n        }\n        return true;\n    }\n    /**\n     * Subscribes to the given event group\n     * @param groupNumber Number(Assigned ENUM) of the group that needs to be subscribed to\n     */\n    subscribeGroup(groupNumber) {\n        const event = { event_name: 'furhatos.event.actions.ActionRealTimeAPISubscribe', group: groupNumber };\n        return this.send(event);\n    }\n    /**\n     * Says a given text\n     * @param text Text which needs to be said by Furhat\n     */\n    say(text) {\n        const event = { event_name: 'furhatos.event.actions.ActionSpeech', text };\n        return this.send(event);\n    }\n    /**\n     * Stimulates the speech of a user in the interaction space\n     * @param text Text which needs to be said by the user\n     */\n    userSpeech(text) {\n        const event = { event_name: 'furhatos.event.senses.SenseTypingEnd', messageText: text };\n        return this.send(event);\n    }\n    /**\n     * Stimulates SenseSpeechStart event. Can be used to stimulate user speech via typing\n     */\n    userSpeechStart() {\n        const event = { event_name: 'furhatos.event.senses.SenseTypingStart' };\n        return this.send(event);\n    }\n    /**\n     * Performs the given gesture\n     * @param name Name of the gesture that needs to be performed\n     */\n    gesture(name) {\n        const event = { event_name: 'furhatos.event.actions.ActionGesture', name };\n        return this.send(event);\n    }\n}\nexports.default = Furhat;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vZnVyaGF0LWNvcmUvZGlzdC9pbmRleC5qcz8yNmFmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBGdXJoYXQgbWFpbiBjbGFzcy4gTWFpbnRhaW5zIHRoZSB3ZWJzb2NrZXQgY29ubmVjdGlvbiB0byBmdXJoYXRPUyBhbmRcbiAqIGhhcyBtZXRob2RzIHRvIHNlbmQgZXZlbnRzLCBzdWJzY3JpYmUgdG8gZXZlbnRzIGFuZCBoZWxwZXIgbWV0aG9kcyBzdWNoIGFzIHNheSxcbiAqIGdlc3R1cmUsIGV0Yy5cbiAqXG4gKiBAcGFyYW0gZG9tYWluIElQIEFkZHJlc3MgZm9yIGZ1cmhhdE9TIC0gbG9jYWxob3N0IGlmIFNESy5cbiAqIEBwYXJhbSBwb3J0IHBvcnQgZm9yIFJlYWxUaW1lQVBJIG1vZHVsZSBvZiBmdXJoYXRPUy5cbiAqIEBwYXJhbSByb3V0ZSByb3V0ZSBmb3IgUmVhbFRpbWVBUEkgbW9kdWxlIG9mIGZ1cmhhdE9TLlxuICovXG5jbGFzcyBGdXJoYXQge1xuICAgIGNvbnN0cnVjdG9yKGRvbWFpbiwgcG9ydCwgcm91dGUpIHtcbiAgICAgICAgdGhpcy5ldmVudEZ1bmN0aW9ucyA9IHt9O1xuICAgICAgICB0aGlzLmRvbWFpbiA9IGRvbWFpbjtcbiAgICAgICAgdGhpcy5wb3J0ID0gcG9ydDtcbiAgICAgICAgdGhpcy5yb3V0ZSA9IHJvdXRlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgY29ubmVjdGlvbiBhbmQgcmV0dXJuIGEgcHJvbWlzZS4gQXdhaXQgZm9yIHRoZSBwcm9taXNlIHRvIHJlc29sdmUgYmVmb3JlXG4gICAgICogdXNpbmcgdGhlIG9iamVjdFxuICAgICAqL1xuICAgIGluaXQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNvY2tldCA9IG5ldyBXZWJTb2NrZXQoYHdzOi8vJHt0aGlzLmRvbWFpbn06JHt0aGlzLnBvcnR9LyR7dGhpcy5yb3V0ZX1gKTtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0Lm9ub3BlbiA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHsgZXJyb3I6IGZhbHNlLCBtZXNzYWdlOiBcIlN1Y2Nlc3NcIiB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnNvY2tldC5vbm1lc3NhZ2UgPSAobWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gSlNPTi5wYXJzZShtZXNzYWdlLmRhdGEpO1xuICAgICAgICAgICAgICAgIC8vIElmIGEgY2FsbGJhY2sgaXMgYXZhaWxhYmxlIHRoZW4gY2FsbCBpdFxuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRGdW5jdGlvbnNbZXZlbnQuZXZlbnRfbmFtZV0gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmV2ZW50RnVuY3Rpb25zW2V2ZW50LmV2ZW50X25hbWVdKGV2ZW50KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnNvY2tldC5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdCh7IGVycm9yOiB0cnVlLCBtZXNzYWdlOiBcIkVycm9yIHdoaWxlIG9wZW5pbmcgc29ja2V0XCIgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRvIHNldCBhIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSB0cmlnZ2VyZWQgYG9uZXJyb3JgIG9mIHRoZSB1bmRlcmx5aW5nIHdlYnNvY2tldFxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvbiB0byBiZSB0cmlnZ2VyIG9uIFdlYlNvY2tldCBjb25uZWN0aW9uIGVycm9yXG4gICAgICovXG4gICAgb25Db25uZWN0aW9uRXJyb3IoY2FsbGJhY2spIHsgdGhpcy5zb2NrZXQgJiYgKHRoaXMuc29ja2V0Lm9uZXJyb3IgPSBjYWxsYmFjayk7IH1cbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gc2V0IGEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIHRyaWdnZXJlZCBgb25jbG9zZWAgb2YgdGhlIHVuZGVybHlpbmcgd2Vic29ja2V0XG4gICAgICogQHBhcmFtIGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIHRyaWdnZXIgb24gV2ViU29ja2V0IGNvbm5lY3Rpb24gY2xvc2VcbiAgICAgKi9cbiAgICBvbkNvbm5lY3Rpb25DbG9zZShjYWxsYmFjaykgeyB0aGlzLnNvY2tldCAmJiAodGhpcy5zb2NrZXQub25jbG9zZSA9IGNhbGxiYWNrKTsgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGFuIGV2ZW50IHRvIGZ1cmhhdE9TXG4gICAgICogQHBhcmFtIGV2ZW50IE9iamVjdCBjb250YWluaW5nIHRoZSBldmVudC4gTWFuZHRvcnkgdG8gaGF2ZSBldmVudF9uYW1lIHBhcmFtZXRlciBpbiB0aGUgb2JqZWN0XG4gICAgICovXG4gICAgc2VuZChldmVudCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgaWYgKCgoX2EgPSB0aGlzLnNvY2tldCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlYWR5U3RhdGUpID09PSAyIHx8ICgoX2IgPSB0aGlzLnNvY2tldCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnJlYWR5U3RhdGUpID09PSAzKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJDYW5ub3Qgc2VuZCBldmVudC4gU29ja2V0IGlzIG5vdCByZWFkeS5cIik7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKChfYyA9IHRoaXMuc29ja2V0KSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MucmVhZHlTdGF0ZSkgPT09IDEpIHtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkoZXZlbnQpKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlcyB0byB0aGUgZ2l2ZW4gZXZlbnQgYW5kIHRyaWdnZXJzIHRoZSBzdXBwbGllZCBjYWxsYmFjayBvbiBldmVudFxuICAgICAqIEBwYXJhbSBldmVudE5hbWUgTmFtZSBvZiB0aGUgZXZlbnQgdG8gc3Vic2NyaWJlXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIEZ1bmN0aW9uIHdoaWNoIG5lZWRzIHRvIGJlIHRyaWdnZXJlZCB3aGVuIHRoZSBnaXZlbiBldmVudCBpcyByZWNpZXZlZFxuICAgICAqIEBwYXJhbSBkb250U2VuZCBbT3B0aW9uYWxdIFtmYWxzZSBieSBkZWZhdWx0XSBCb29sZWFuIHdoaWNoIGRldGVybWluZXMgd2V0aGVyIHRvIHNlbmRcbiAgICAgKiB0aGUgc3Vic2NyaWJlIGV2ZW50IG9yIG5vdC4gdXNlIGl0IHRvIHNldCBjYWxsYmFja3MgZm9yIGV2ZW50IHRoYXQgYXJlIGFscmVhZHkgc3Vic2NyaWJlZCB0byxcbiAgICAgKiBmb3IgaW5zdGFuY2Ugd2l0aCBncm91cCBzdWJzY3JpcHRpb25zXG4gICAgICovXG4gICAgc3Vic2NyaWJlKGV2ZW50TmFtZSwgY2FsbGJhY2ssIGRvbnRTZW5kID0gZmFsc2UpIHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSB7IGV2ZW50X25hbWU6ICdmdXJoYXRvcy5ldmVudC5hY3Rpb25zLkFjdGlvblJlYWxUaW1lQVBJU3Vic2NyaWJlJywgbmFtZTogZXZlbnROYW1lIH07XG4gICAgICAgIHRoaXMuZXZlbnRGdW5jdGlvbnNbZXZlbnROYW1lXSA9IGNhbGxiYWNrO1xuICAgICAgICBpZiAoIWRvbnRTZW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlcyB0byB0aGUgZ2l2ZW4gZXZlbnQgZ3JvdXBcbiAgICAgKiBAcGFyYW0gZ3JvdXBOdW1iZXIgTnVtYmVyKEFzc2lnbmVkIEVOVU0pIG9mIHRoZSBncm91cCB0aGF0IG5lZWRzIHRvIGJlIHN1YnNjcmliZWQgdG9cbiAgICAgKi9cbiAgICBzdWJzY3JpYmVHcm91cChncm91cE51bWJlcikge1xuICAgICAgICBjb25zdCBldmVudCA9IHsgZXZlbnRfbmFtZTogJ2Z1cmhhdG9zLmV2ZW50LmFjdGlvbnMuQWN0aW9uUmVhbFRpbWVBUElTdWJzY3JpYmUnLCBncm91cDogZ3JvdXBOdW1iZXIgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZChldmVudCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNheXMgYSBnaXZlbiB0ZXh0XG4gICAgICogQHBhcmFtIHRleHQgVGV4dCB3aGljaCBuZWVkcyB0byBiZSBzYWlkIGJ5IEZ1cmhhdFxuICAgICAqL1xuICAgIHNheSh0ZXh0KSB7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0geyBldmVudF9uYW1lOiAnZnVyaGF0b3MuZXZlbnQuYWN0aW9ucy5BY3Rpb25TcGVlY2gnLCB0ZXh0IH07XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoZXZlbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGltdWxhdGVzIHRoZSBzcGVlY2ggb2YgYSB1c2VyIGluIHRoZSBpbnRlcmFjdGlvbiBzcGFjZVxuICAgICAqIEBwYXJhbSB0ZXh0IFRleHQgd2hpY2ggbmVlZHMgdG8gYmUgc2FpZCBieSB0aGUgdXNlclxuICAgICAqL1xuICAgIHVzZXJTcGVlY2godGV4dCkge1xuICAgICAgICBjb25zdCBldmVudCA9IHsgZXZlbnRfbmFtZTogJ2Z1cmhhdG9zLmV2ZW50LnNlbnNlcy5TZW5zZVR5cGluZ0VuZCcsIG1lc3NhZ2VUZXh0OiB0ZXh0IH07XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoZXZlbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGltdWxhdGVzIFNlbnNlU3BlZWNoU3RhcnQgZXZlbnQuIENhbiBiZSB1c2VkIHRvIHN0aW11bGF0ZSB1c2VyIHNwZWVjaCB2aWEgdHlwaW5nXG4gICAgICovXG4gICAgdXNlclNwZWVjaFN0YXJ0KCkge1xuICAgICAgICBjb25zdCBldmVudCA9IHsgZXZlbnRfbmFtZTogJ2Z1cmhhdG9zLmV2ZW50LnNlbnNlcy5TZW5zZVR5cGluZ1N0YXJ0JyB9O1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKGV2ZW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgdGhlIGdpdmVuIGdlc3R1cmVcbiAgICAgKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoZSBnZXN0dXJlIHRoYXQgbmVlZHMgdG8gYmUgcGVyZm9ybWVkXG4gICAgICovXG4gICAgZ2VzdHVyZShuYW1lKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0geyBldmVudF9uYW1lOiAnZnVyaGF0b3MuZXZlbnQuYWN0aW9ucy5BY3Rpb25HZXN0dXJlJywgbmFtZSB9O1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKGV2ZW50KTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBGdXJoYXQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZnVyaGF0LWNvcmUvZGlzdC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/* no static exports found */
/* all exports used */
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_furhat_gui__ = __webpack_require__(/*! furhat-gui */ 0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_furhat_gui___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_furhat_gui__);\n\r\nlet reactions = {};\r\nlet age = null;\r\n\r\nlet currentlyEditingMessageId = null;\r\nlet isEmojiPickerOpen = false;\r\n//const emojiList = ['😀', '😂', '😊', '😎', '😜', '😍', '😘', '🥳', '👍', '👎'];\r\nconst emojiList = ['🤩', '😁', '😃', '😀', '🙂'];\r\nlet furhat = null;\r\nlet agePanelVisible = false;\r\n\r\nconsole.log(\"i am loaded\")\r\n\r\n\r\n{__WEBPACK_IMPORTED_MODULE_0_furhat_gui___default()()\r\n    .then(connection => {\r\n        furhat = connection;\r\n        furhat.subscribe('furhatos.app.base_search_agent.DataDelivery', (data) => {\r\n            // Activates any time i received somethíng from the FH side! DataDelivery Bby\r\n            console.log(data)\r\n            if (data.messagesLog) {\r\n                displayChatReactMode(data.messagesLog);\r\n            }\r\n            else if (data.videoUrl) {\r\n                displayVideoMode(data.videoUrl)\r\n            }\r\n            else {\r\n                    document.getElementById('chatContainer').innerHTML = '';\r\n                    document.getElementById('videoContainer').innerHTML = '';\r\n                    if (document.getElementById(\"agePanelContainer\")) {document.getElementById(\"agePanelContainer\").innerHTML = '';}\r\n                    if (document.getElementById(\"readyButton\")) {document.getElementById(\"readyButtonContainer\").innerHTML = '';}\r\n                    console.log(\"got empty message\");\r\n            }\r\n        })\r\n\r\n    })\r\n    .catch(console.error)\r\n}\r\n\r\n// Small update required: close the ready button (code might be available on the mac):\r\nfunction displayVideoMode(input) {\r\n    //if(input.)\r\n    document.getElementById('chatContainer').innerHTML = '';\r\n    document.getElementById('videoContainer').innerHTML = '';\r\n    if (document.getElementById(\"agePanelContainer\")) {document.getElementById(\"agePanelContainer\").innerHTML = '';}\r\n    if (document.getElementById(\"readyButton\")) {document.getElementById(\"readyButtonContainer\").innerHTML = '';}\r\n\r\n    // Create a new video element\r\n    if (document.getElementById(\"vid\")) {document.getElementById(\"vid\").outerHTML = ''; console.log(\"old vid removed\")}\r\n    const video = document.createElement('video');\r\n\r\n    // Set the video's source\r\n    video.src = input;\r\n    video.controls = true;\r\n    video.autoplay = true;\r\n    video.id = \"vid\";\r\n\r\n    // Set some optional attributes, like width and height\r\n    video.width = 640;   // You can adjust this value\r\n    video.height = 480;  // You can adjust this value\r\n    document.getElementById('videoContainer').append(video);\r\n\r\n    // Append the video element to the body of the document\r\n    // You can change 'document.body' to append it to a different element\r\n    //document.getElementById(\"videoContainer\").innerHTML = video.outerHTML;\r\n}\r\n\r\nfunction displayChatReactMode(input) {\r\n    document.getElementById('videoContainer').innerHTML = '';\r\n    //document.getElementById('videoContainer').outerHTML = '';\r\n    //document.getElementById('chatContainer').innerHTML = '';\r\n    if(!document.getElementById('chatContainer')){document}\r\n    console.log(\"ran displaychatreactmode\");\r\n    reactions = {};\r\n    addMessagesToDOM(input)\r\n\r\n    if (!document.getElementById(\"readyButton\")) {\r\n        // Create a container for the button and separator\r\n        var readyButtonContainer = document.createElement(\"div\");\r\n        readyButtonContainer.id = \"readyButtonContainer\"; // Set an ID or class for styling if needed\r\n\r\n        // Create a new button element\r\n        var readyButton = document.createElement(\"button\");\r\n        readyButton.id = \"readyButton\"; // Set attributes for the button\r\n        readyButton.innerText = \"Ik ben klaar!\"; // You can change the button text here\r\n\r\n        // Create a separator\r\n        var separator = document.createElement(\"hr\");\r\n        separator.className = \"separator\";\r\n\r\n        // Append the separator and the button to the container\r\n        readyButtonContainer.appendChild(separator);\r\n        readyButtonContainer.appendChild(readyButton);\r\n\r\n        // Append the container to the body of the document\r\n        // You can change 'document.body' to append it to a different element\r\n        document.body.appendChild(readyButtonContainer);\r\n\r\n        // Add a click event listener to the button\r\n        readyButton.addEventListener('click', () => displayAgePanel()); //exportReactions());\r\n    }\r\n}\r\n\r\nfunction addMessagesToDOM(messagesJson) {\r\n    console.log(messagesJson)\r\n    var parsedData = JSON.parse(messagesJson)\r\n    console.log(parsedData.messages[0].text)\r\n\r\n    parsedData.messages.forEach(message => {\r\n        // Create divs and other elements\r\n        let bubbleWrapper = document.createElement('div');\r\n        bubbleWrapper.className = 'bubbleWrapper';\r\n        let inlineContainer = document.createElement('div');\r\n\r\n        if (message.who == \"robot\") {\r\n            inlineContainer.className = 'inlineContainer';\r\n\r\n            let icon = document.createElement('img');\r\n            icon.className = 'inlineIcon';\r\n            icon.src = 'src/rb.png'; // Adjust the source as needed\r\n\r\n            let bubble = document.createElement('div');\r\n            bubble.className = 'otherBubble other';\r\n            bubble.id = message.id;\r\n            bubble.textContent = message.text;\r\n            bubble.addEventListener('click', () => openEmojiPicker(message.id));\r\n\r\n            let reaction = document.createElement('div');\r\n            reaction.id = message.emojiId;\r\n            reaction.className = 'reaction';\r\n\r\n            let emojiOverlay = document.createElement('div');\r\n            emojiOverlay.className = 'emojiOverlay';\r\n\r\n            // Append child elements\r\n            reaction.appendChild(emojiOverlay);\r\n            bubble.appendChild(reaction);\r\n            inlineContainer.appendChild(icon);\r\n            inlineContainer.appendChild(bubble);\r\n            bubbleWrapper.appendChild(inlineContainer);\r\n        }\r\n\r\n        if (message.who == \"kid\") {\r\n            inlineContainer.className = 'inlineContainer own';\r\n            let icon = document.createElement('img');\r\n            icon.className = 'inlineIcon';\r\n            icon.src = 'src/jij.png'; // Adjust the source as needed\r\n\r\n            let bubble = document.createElement('div');\r\n            bubble.className = 'ownBubble own';\r\n            bubble.id = message.id;\r\n            bubble.textContent = message.text;\r\n\r\n            inlineContainer.appendChild(icon);\r\n            inlineContainer.appendChild(bubble);\r\n            bubbleWrapper.appendChild(inlineContainer);\r\n        }\r\n\r\n        reactions[message.id] = {\r\n            reaction: message.emojiId,\r\n            text: '',\r\n            utterance: message.text, // Store the text it was based on\r\n            startTime: message.startTime, // Add a startTime property if needed\r\n            who: message.who// Add other properties as needed\r\n        };\r\n\r\n        // Append to document\r\n        // Assuming bubbleWrapper is already defined and you want to append it to a div with the id 'chat'\r\n        var chatDiv = document.getElementById('chatContainer');\r\n        chatDiv.appendChild(bubbleWrapper);\r\n        updateSingleReaction(message.id);\r\n    });\r\n}\r\n\r\nfunction openEmojiPicker(messageId) {//, existingReaction = '') {\r\n    // BLUR CODE\r\n    // Set the currently editing message ID globally\r\n    currentlyEditingMessageId = messageId;\r\n\r\n    // Apply blur to other elements\r\n    const allMessages = document.querySelectorAll('.otherBubble, .ownBubble, .inlineIcon, .inlineContainer.own, .readyButton');\r\n    allMessages.forEach(message => {\r\n        if (message.id != \"\" && message.id != messageId ) {\r\n            message.classList.add('blur');\r\n        }\r\n    });\r\n    ///// END of blur CODE\r\n\r\n    const readyButton = document.getElementById('readyButton');\r\n    if (readyButton) {\r\n        readyButton.style.display = 'none';\r\n    }\r\n\r\n    // Get the position of the selected message\r\n    const selectedMessage = document.getElementById(messageId);\r\n    if (!selectedMessage) {\r\n        return; // Handle the case where the selected message is not found\r\n    }\r\n\r\n    const selectedMessageRect = selectedMessage.getBoundingClientRect();\r\n\r\n    // Calculate the position for the emoji picker\r\n    const emojiPicker = document.getElementById('emojiPicker');\r\n    if (emojiPicker) {\r\n        emojiPicker.style.display = 'block';\r\n        emojiPicker.dataset.messageId = messageId;\r\n        let topPosition = selectedMessageRect.top + 120; // Initial offset, adjust as needed\r\n        let leftPosition = selectedMessageRect.right + 232; // Adjust the offset as needed\r\n\r\n        // Ensure the emoji picker does not exceed the screen height\r\n        const screenHeight = window.innerHeight;\r\n        const pickerHeight = emojiPicker.offsetHeight;\r\n\r\n        if (topPosition + pickerHeight > screenHeight) {\r\n            topPosition = screenHeight - pickerHeight;\r\n        }\r\n        const minimumTopOffset = 20; // Adjust as needed\r\n        topPosition = Math.max(minimumTopOffset, topPosition);\r\n\r\n\r\n        // Set the final position of the emoji picker\r\n        emojiPicker.style.top = `${Math.max(0, topPosition)}px`;\r\n        emojiPicker.style.left = `${Math.max(0, leftPosition)}px`;\r\n    }\r\n\r\n    if (!reactions[messageId]) {\r\n        reactions[messageId] = { reaction:'' };\r\n    }\r\n\r\n    const existingReaction = reactions[messageId].reaction;\r\n\r\n    const emojiContainer = document.querySelector('.emojiContainer');\r\n    emojiContainer.innerHTML = '';\r\n\r\n    emojiList.forEach(emoji => {\r\n        const emojiSpan = document.createElement('span');\r\n        emojiSpan.classList.add('emoji');\r\n        emojiSpan.textContent = emoji;\r\n        emojiSpan.dataset.emoji = emoji;\r\n\r\n        if (existingReaction === emoji) {\r\n            emojiSpan.classList.add('selected');\r\n        }\r\n\r\n        emojiSpan.onclick = () => selectEmoji(emoji);\r\n        emojiContainer.appendChild(emojiSpan);\r\n    });\r\n\r\n    const existingText = reactions[messageId].text || '';\r\n\r\n    const reactionTextField = document.getElementById('additionalTextField');\r\n    if (reactionTextField) {\r\n        reactionTextField.value = existingText;\r\n    }\r\n\r\n    let rem = document.getElementById(\"removeButton\")\r\n    rem.addEventListener('click', () => deselectEmoji());\r\n\r\n    let close = document.getElementById(\"closeButton\")\r\n    close.addEventListener('click', () => closeEmojiPicker());\r\n\r\n    isEmojiPickerOpen = true;\r\n\r\n}\r\n\r\nfunction closeEmojiPicker() {\r\n    const messageId = document.getElementById('emojiPicker').dataset.messageId;\r\n    const reactionTextField = document.getElementById('additionalTextField');\r\n\r\n    if (messageId && reactionTextField) {\r\n        reactions[messageId].text = reactionTextField.value;\r\n    }\r\n\r\n    updateReactions();\r\n\r\n    // Remove .editing class from the currently edited message\r\n    const currentlyEditingMessage = document.getElementById(currentlyEditingMessageId);\r\n    if (currentlyEditingMessage) {\r\n        currentlyEditingMessage.classList.remove('editing');\r\n    }\r\n\r\n    // Reset the currently editing message ID globally\r\n    currentlyEditingMessageId = null;\r\n\r\n    // Remove blur from other elements\r\n    const blurElements = document.querySelectorAll('.blur');\r\n    blurElements.forEach(element => {\r\n        element.classList.remove('blur');\r\n    });\r\n    // END OF BLUR CODE\r\n\r\n    const readyButton = document.getElementById('readyButton');\r\n    if (readyButton) {\r\n        readyButton.disabled = false;\r\n        readyButton.style.display = 'block';\r\n    }\r\n\r\n    const emojiPicker = document.getElementById('emojiPicker');\r\n    emojiPicker.style.display = 'none';\r\n\r\n    updateReactions();\r\n\r\n    isEmojiPickerOpen = false;\r\n}\r\n\r\nfunction selectEmoji(emoji) {\r\n    const messageId = document.getElementById('emojiPicker').dataset.messageId;\r\n    const emojiContainer = document.querySelector('.emojiContainer');\r\n\r\n    // Remove the 'selected' class from all emojis\r\n    emojiContainer.querySelectorAll('.emoji').forEach(el => el.classList.remove('selected'));\r\n\r\n    // Add the 'selected' class to the clicked emoji\r\n    const selectedEmoji = emojiContainer.querySelector(`[data-emoji=\"${emoji}\"]`);\r\n    if (selectedEmoji) {\r\n        selectedEmoji.classList.add('selected');\r\n    }\r\n    reactions[messageId].reaction = emoji; // new\r\n    updateReactions();\r\n}\r\n\r\nfunction deselectEmoji() {\r\n    const messageId = document.getElementById('emojiPicker').dataset.messageId;\r\n    const emojiContainer = document.querySelector('.emojiContainer');\r\n    const reactionTextField = document.getElementById('additionalTextField');\r\n    // Remove the 'selected' class from all emojis\r\n    emojiContainer.querySelectorAll('.emoji').forEach(el => el.classList.remove('selected'));\r\n\r\n    // clear textfield\r\n    reactionTextField.value = '';\r\n\r\n    reactions[messageId] = {\r\n        emoji: \"\", // Set the emoji to an empty string\r\n        text: \"\",  // Set the text to an empty string\r\n    };\r\n    closeEmojiPicker();\r\n}\r\n\r\nfunction updateReactions() {\r\n    const messageId = document.getElementById('emojiPicker').dataset.messageId;\r\n    const message = document.getElementById(messageId);\r\n    const emojiOverlay = message ? message.querySelector('.emojiOverlay') : null;\r\n\r\n    if (emojiOverlay) {\r\n        const { reaction } = reactions[messageId];\r\n\r\n        if (reaction) {\r\n            emojiOverlay.textContent = reaction;\r\n            emojiOverlay.style.display = 'block';\r\n        } else {\r\n            emojiOverlay.textContent = '';\r\n            emojiOverlay.style.display = 'none';\r\n        }\r\n    }\r\n}\r\n\r\nfunction updateSingleReaction(messageId) {\r\n    const message = document.getElementById(messageId);\r\n    const emojiOverlay = message ? message.querySelector('.emojiOverlay') : null;\r\n\r\n    if (emojiOverlay) {\r\n        const { reaction } = reactions[messageId];\r\n\r\n        if (reaction) {\r\n            emojiOverlay.textContent = reaction;\r\n            emojiOverlay.style.display = 'block';\r\n        } else {\r\n            emojiOverlay.textContent = '';\r\n            emojiOverlay.style.display = 'none';\r\n        }\r\n    }\r\n}\r\n\r\nfunction displayAgePanel() {\r\n    // Check if the age panel is already visible, if so, do nothing\r\n    if (agePanelVisible) {\r\n        console.log(\"AGE PANEL ALREADY VISIBLE\");\r\n        return;\r\n    }\r\n\r\n    // Create an overlay container for the age panel\r\n    const overlayContainer = document.createElement(\"div\");\r\n    overlayContainer.id = \"overlayContainer\";\r\n\r\n    // Create a container for the age input, confirm button, and back button\r\n    const agePanelContainer = document.createElement(\"div\");\r\n    agePanelContainer.id = \"agePanelContainer\";\r\n\r\n    // Create a label for the age input\r\n    const ageInputLabel = document.createElement(\"label\");\r\n    ageInputLabel.innerText = \"Vul je leeftijd in:\";\r\n    agePanelContainer.appendChild(ageInputLabel);\r\n\r\n    // Create an input field for age\r\n    const ageInput = document.createElement(\"input\");\r\n    ageInput.type = \"number\";\r\n    ageInput.id = \"ageInput\";\r\n    agePanelContainer.appendChild(ageInput);\r\n\r\n    // Create a confirm button\r\n    const confirmButton = document.createElement(\"button\");\r\n    confirmButton.innerText = \"Ok\";\r\n    confirmButton.id = \"confirmButton\";\r\n    agePanelContainer.appendChild(confirmButton);\r\n\r\n    // Create a back button\r\n    const backButton = document.createElement(\"button\");\r\n    backButton.innerText = \"Terug\";\r\n    backButton.id = \"backButton\";\r\n    agePanelContainer.appendChild(backButton);\r\n\r\n    // Append the age panel container to the overlay container\r\n    overlayContainer.appendChild(agePanelContainer);\r\n\r\n    // Append the overlay container to the body\r\n    document.body.appendChild(overlayContainer);\r\n\r\n    // Set agePanelVisible to true\r\n    agePanelVisible = true;\r\n\r\n    // Add event listener for the confirm button\r\n    confirmButton.addEventListener('click', () => {\r\n        var ageValue = document.getElementById(\"ageInput\").value;\r\n        if (!isNaN(ageValue) && ageValue >= 0) { /// NAN CHECK NOT WORKIGN IN FIREFOX\r\n            // Age is valid, store it and hide the age panel\r\n            age = ageValue;\r\n            overlayContainer.style.display = 'none';\r\n            agePanelVisible = false;\r\n            agePanelContainer.innerHTML = '';\r\n            exportReactions();\r\n        } else {\r\n            // Invalid age, show an error message (you can customize this)\r\n            console.log('invalid age');\r\n            alert(\"Gebruik een nummer\");\r\n        }\r\n    });\r\n\r\n    // Add event listener for the back button\r\n    backButton.addEventListener('click', () => {\r\n        // Hide the overlay\r\n        overlayContainer.style.display = 'none';\r\n        agePanelVisible = false;\r\n    });\r\n}\r\n\r\n\r\nfunction exportReactions() {\r\n    console.log(\"Confirm pressed\",age);\r\n    const jsonReactions = JSON.stringify({\r\n        reactions: reactions,\r\n        age: age // Include the age in the data\r\n    });\r\n\r\n    console.log(\"LAATSTE AGE: \", age);\r\n\r\n    furhat.send({\r\n        event_name: \"ClickButton\",\r\n        data: jsonReactions\r\n    })\r\n    console.log(jsonReactions);\r\n}\r\n\r\n\r\n\r\n\r\n// toggle the blur class on the body\r\nfunction addBlur() {\r\n    document.body.classList.add('blur');\r\n}\r\n\r\nfunction removeBlur() {\r\n    document.body.classList.remove('blur');\r\n}\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n");

/***/ })
/******/ ]);