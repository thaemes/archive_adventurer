/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/* no static exports found */
/* exports used: default */
/*!************************************!*\
  !*** ./~/furhat-gui/dist/index.js ***!
  \************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Furhat = void 0;\nconst furhat_core_1 = __importDefault(__webpack_require__(/*! furhat-core */ 1));\nexports.Furhat = furhat_core_1.default;\nlet furhat;\nlet portNumber;\n/**\n * FurhatGUI Function which sets up a connection to the furhat skill and gives\n * the furhat object to send and recieve events to the skill.\n * @return Promise that will return the promise with a `Furhat` obkect\n */\nconst FurhatGUI = () => new Promise((resolve, reject) => {\n    window.fetch('/port', { method: 'GET' }) // eslint-disable-line no-undef\n        .then(r => r.json())\n        .then(({ address, port }) => {\n        portNumber = port;\n        furhat = new furhat_core_1.default(address, port, 'api');\n        return furhat.init();\n    })\n        .then(() => {\n        const senseSkillGuiEvent = {\n            event_name: 'furhatos.event.senses.SenseSkillGUIConnected',\n            port: portNumber,\n        };\n        furhat.send(senseSkillGuiEvent);\n        resolve(furhat);\n    })\n        .catch((error) => reject(`Something went wrong: ${error}`));\n});\nexports.default = FurhatGUI;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vZnVyaGF0LWd1aS9kaXN0L2luZGV4LmpzPzJkNDIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZ1cmhhdCA9IHZvaWQgMDtcbmNvbnN0IGZ1cmhhdF9jb3JlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImZ1cmhhdC1jb3JlXCIpKTtcbmV4cG9ydHMuRnVyaGF0ID0gZnVyaGF0X2NvcmVfMS5kZWZhdWx0O1xubGV0IGZ1cmhhdDtcbmxldCBwb3J0TnVtYmVyO1xuLyoqXG4gKiBGdXJoYXRHVUkgRnVuY3Rpb24gd2hpY2ggc2V0cyB1cCBhIGNvbm5lY3Rpb24gdG8gdGhlIGZ1cmhhdCBza2lsbCBhbmQgZ2l2ZXNcbiAqIHRoZSBmdXJoYXQgb2JqZWN0IHRvIHNlbmQgYW5kIHJlY2lldmUgZXZlbnRzIHRvIHRoZSBza2lsbC5cbiAqIEByZXR1cm4gUHJvbWlzZSB0aGF0IHdpbGwgcmV0dXJuIHRoZSBwcm9taXNlIHdpdGggYSBgRnVyaGF0YCBvYmtlY3RcbiAqL1xuY29uc3QgRnVyaGF0R1VJID0gKCkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHdpbmRvdy5mZXRjaCgnL3BvcnQnLCB7IG1ldGhvZDogJ0dFVCcgfSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuICAgICAgICAudGhlbihyID0+IHIuanNvbigpKVxuICAgICAgICAudGhlbigoeyBhZGRyZXNzLCBwb3J0IH0pID0+IHtcbiAgICAgICAgcG9ydE51bWJlciA9IHBvcnQ7XG4gICAgICAgIGZ1cmhhdCA9IG5ldyBmdXJoYXRfY29yZV8xLmRlZmF1bHQoYWRkcmVzcywgcG9ydCwgJ2FwaScpO1xuICAgICAgICByZXR1cm4gZnVyaGF0LmluaXQoKTtcbiAgICB9KVxuICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNlbnNlU2tpbGxHdWlFdmVudCA9IHtcbiAgICAgICAgICAgIGV2ZW50X25hbWU6ICdmdXJoYXRvcy5ldmVudC5zZW5zZXMuU2Vuc2VTa2lsbEdVSUNvbm5lY3RlZCcsXG4gICAgICAgICAgICBwb3J0OiBwb3J0TnVtYmVyLFxuICAgICAgICB9O1xuICAgICAgICBmdXJoYXQuc2VuZChzZW5zZVNraWxsR3VpRXZlbnQpO1xuICAgICAgICByZXNvbHZlKGZ1cmhhdCk7XG4gICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnJvcikgPT4gcmVqZWN0KGBTb21ldGhpbmcgd2VudCB3cm9uZzogJHtlcnJvcn1gKSk7XG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IEZ1cmhhdEdVSTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9mdXJoYXQtZ3VpL2Rpc3QvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/* no static exports found */
/* all exports used */
/*!*************************************!*\
  !*** ./~/furhat-core/dist/index.js ***!
  \*************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Furhat main class. Maintains the websocket connection to furhatOS and\n * has methods to send events, subscribe to events and helper methods such as say,\n * gesture, etc.\n *\n * @param domain IP Address for furhatOS - localhost if SDK.\n * @param port port for RealTimeAPI module of furhatOS.\n * @param route route for RealTimeAPI module of furhatOS.\n */\nclass Furhat {\n    constructor(domain, port, route) {\n        this.eventFunctions = {};\n        this.domain = domain;\n        this.port = port;\n        this.route = route;\n    }\n    /**\n     * Initializes the connection and return a promise. Await for the promise to resolve before\n     * using the object\n     */\n    init() {\n        return new Promise((resolve, reject) => {\n            this.socket = new WebSocket(`ws://${this.domain}:${this.port}/${this.route}`);\n            this.socket.onopen = () => {\n                resolve({ error: false, message: \"Success\" });\n            };\n            this.socket.onmessage = (message) => {\n                const event = JSON.parse(message.data);\n                // If a callback is available then call it\n                this.eventFunctions[event.event_name] !== undefined &&\n                    this.eventFunctions[event.event_name](event);\n            };\n            this.socket.onerror = () => {\n                reject({ error: true, message: \"Error while opening socket\" });\n            };\n        });\n    }\n    /**\n     * Method to set a callback that will be triggered `onerror` of the underlying websocket\n     * @param callback Callback function to be trigger on WebSocket connection error\n     */\n    onConnectionError(callback) { this.socket && (this.socket.onerror = callback); }\n    /**\n     * Method to set a callback that will be triggered `onclose` of the underlying websocket\n     * @param callback Callback function to be trigger on WebSocket connection close\n     */\n    onConnectionClose(callback) { this.socket && (this.socket.onclose = callback); }\n    /**\n     * Sends an event to furhatOS\n     * @param event Object containing the event. Mandtory to have event_name parameter in the object\n     */\n    send(event) {\n        var _a, _b, _c;\n        if (((_a = this.socket) === null || _a === void 0 ? void 0 : _a.readyState) === 2 || ((_b = this.socket) === null || _b === void 0 ? void 0 : _b.readyState) === 3) {\n            console.warn(\"Cannot send event. Socket is not ready.\");\n            return false;\n        }\n        else if (((_c = this.socket) === null || _c === void 0 ? void 0 : _c.readyState) === 1) {\n            this.socket.send(JSON.stringify(event));\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Subscribes to the given event and triggers the supplied callback on event\n     * @param eventName Name of the event to subscribe\n     * @param callback Function which needs to be triggered when the given event is recieved\n     * @param dontSend [Optional] [false by default] Boolean which determines wether to send\n     * the subscribe event or not. use it to set callbacks for event that are already subscribed to,\n     * for instance with group subscriptions\n     */\n    subscribe(eventName, callback, dontSend = false) {\n        const event = { event_name: 'furhatos.event.actions.ActionRealTimeAPISubscribe', name: eventName };\n        this.eventFunctions[eventName] = callback;\n        if (!dontSend) {\n            return this.send(event);\n        }\n        return true;\n    }\n    /**\n     * Subscribes to the given event group\n     * @param groupNumber Number(Assigned ENUM) of the group that needs to be subscribed to\n     */\n    subscribeGroup(groupNumber) {\n        const event = { event_name: 'furhatos.event.actions.ActionRealTimeAPISubscribe', group: groupNumber };\n        return this.send(event);\n    }\n    /**\n     * Says a given text\n     * @param text Text which needs to be said by Furhat\n     */\n    say(text) {\n        const event = { event_name: 'furhatos.event.actions.ActionSpeech', text };\n        return this.send(event);\n    }\n    /**\n     * Stimulates the speech of a user in the interaction space\n     * @param text Text which needs to be said by the user\n     */\n    userSpeech(text) {\n        const event = { event_name: 'furhatos.event.senses.SenseTypingEnd', messageText: text };\n        return this.send(event);\n    }\n    /**\n     * Stimulates SenseSpeechStart event. Can be used to stimulate user speech via typing\n     */\n    userSpeechStart() {\n        const event = { event_name: 'furhatos.event.senses.SenseTypingStart' };\n        return this.send(event);\n    }\n    /**\n     * Performs the given gesture\n     * @param name Name of the gesture that needs to be performed\n     */\n    gesture(name) {\n        const event = { event_name: 'furhatos.event.actions.ActionGesture', name };\n        return this.send(event);\n    }\n}\nexports.default = Furhat;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vZnVyaGF0LWNvcmUvZGlzdC9pbmRleC5qcz8yNmFmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBGdXJoYXQgbWFpbiBjbGFzcy4gTWFpbnRhaW5zIHRoZSB3ZWJzb2NrZXQgY29ubmVjdGlvbiB0byBmdXJoYXRPUyBhbmRcbiAqIGhhcyBtZXRob2RzIHRvIHNlbmQgZXZlbnRzLCBzdWJzY3JpYmUgdG8gZXZlbnRzIGFuZCBoZWxwZXIgbWV0aG9kcyBzdWNoIGFzIHNheSxcbiAqIGdlc3R1cmUsIGV0Yy5cbiAqXG4gKiBAcGFyYW0gZG9tYWluIElQIEFkZHJlc3MgZm9yIGZ1cmhhdE9TIC0gbG9jYWxob3N0IGlmIFNESy5cbiAqIEBwYXJhbSBwb3J0IHBvcnQgZm9yIFJlYWxUaW1lQVBJIG1vZHVsZSBvZiBmdXJoYXRPUy5cbiAqIEBwYXJhbSByb3V0ZSByb3V0ZSBmb3IgUmVhbFRpbWVBUEkgbW9kdWxlIG9mIGZ1cmhhdE9TLlxuICovXG5jbGFzcyBGdXJoYXQge1xuICAgIGNvbnN0cnVjdG9yKGRvbWFpbiwgcG9ydCwgcm91dGUpIHtcbiAgICAgICAgdGhpcy5ldmVudEZ1bmN0aW9ucyA9IHt9O1xuICAgICAgICB0aGlzLmRvbWFpbiA9IGRvbWFpbjtcbiAgICAgICAgdGhpcy5wb3J0ID0gcG9ydDtcbiAgICAgICAgdGhpcy5yb3V0ZSA9IHJvdXRlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgY29ubmVjdGlvbiBhbmQgcmV0dXJuIGEgcHJvbWlzZS4gQXdhaXQgZm9yIHRoZSBwcm9taXNlIHRvIHJlc29sdmUgYmVmb3JlXG4gICAgICogdXNpbmcgdGhlIG9iamVjdFxuICAgICAqL1xuICAgIGluaXQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNvY2tldCA9IG5ldyBXZWJTb2NrZXQoYHdzOi8vJHt0aGlzLmRvbWFpbn06JHt0aGlzLnBvcnR9LyR7dGhpcy5yb3V0ZX1gKTtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0Lm9ub3BlbiA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHsgZXJyb3I6IGZhbHNlLCBtZXNzYWdlOiBcIlN1Y2Nlc3NcIiB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnNvY2tldC5vbm1lc3NhZ2UgPSAobWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gSlNPTi5wYXJzZShtZXNzYWdlLmRhdGEpO1xuICAgICAgICAgICAgICAgIC8vIElmIGEgY2FsbGJhY2sgaXMgYXZhaWxhYmxlIHRoZW4gY2FsbCBpdFxuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRGdW5jdGlvbnNbZXZlbnQuZXZlbnRfbmFtZV0gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmV2ZW50RnVuY3Rpb25zW2V2ZW50LmV2ZW50X25hbWVdKGV2ZW50KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnNvY2tldC5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdCh7IGVycm9yOiB0cnVlLCBtZXNzYWdlOiBcIkVycm9yIHdoaWxlIG9wZW5pbmcgc29ja2V0XCIgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRvIHNldCBhIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSB0cmlnZ2VyZWQgYG9uZXJyb3JgIG9mIHRoZSB1bmRlcmx5aW5nIHdlYnNvY2tldFxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvbiB0byBiZSB0cmlnZ2VyIG9uIFdlYlNvY2tldCBjb25uZWN0aW9uIGVycm9yXG4gICAgICovXG4gICAgb25Db25uZWN0aW9uRXJyb3IoY2FsbGJhY2spIHsgdGhpcy5zb2NrZXQgJiYgKHRoaXMuc29ja2V0Lm9uZXJyb3IgPSBjYWxsYmFjayk7IH1cbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gc2V0IGEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIHRyaWdnZXJlZCBgb25jbG9zZWAgb2YgdGhlIHVuZGVybHlpbmcgd2Vic29ja2V0XG4gICAgICogQHBhcmFtIGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIHRyaWdnZXIgb24gV2ViU29ja2V0IGNvbm5lY3Rpb24gY2xvc2VcbiAgICAgKi9cbiAgICBvbkNvbm5lY3Rpb25DbG9zZShjYWxsYmFjaykgeyB0aGlzLnNvY2tldCAmJiAodGhpcy5zb2NrZXQub25jbG9zZSA9IGNhbGxiYWNrKTsgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGFuIGV2ZW50IHRvIGZ1cmhhdE9TXG4gICAgICogQHBhcmFtIGV2ZW50IE9iamVjdCBjb250YWluaW5nIHRoZSBldmVudC4gTWFuZHRvcnkgdG8gaGF2ZSBldmVudF9uYW1lIHBhcmFtZXRlciBpbiB0aGUgb2JqZWN0XG4gICAgICovXG4gICAgc2VuZChldmVudCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgaWYgKCgoX2EgPSB0aGlzLnNvY2tldCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlYWR5U3RhdGUpID09PSAyIHx8ICgoX2IgPSB0aGlzLnNvY2tldCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnJlYWR5U3RhdGUpID09PSAzKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJDYW5ub3Qgc2VuZCBldmVudC4gU29ja2V0IGlzIG5vdCByZWFkeS5cIik7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKChfYyA9IHRoaXMuc29ja2V0KSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MucmVhZHlTdGF0ZSkgPT09IDEpIHtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkoZXZlbnQpKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlcyB0byB0aGUgZ2l2ZW4gZXZlbnQgYW5kIHRyaWdnZXJzIHRoZSBzdXBwbGllZCBjYWxsYmFjayBvbiBldmVudFxuICAgICAqIEBwYXJhbSBldmVudE5hbWUgTmFtZSBvZiB0aGUgZXZlbnQgdG8gc3Vic2NyaWJlXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIEZ1bmN0aW9uIHdoaWNoIG5lZWRzIHRvIGJlIHRyaWdnZXJlZCB3aGVuIHRoZSBnaXZlbiBldmVudCBpcyByZWNpZXZlZFxuICAgICAqIEBwYXJhbSBkb250U2VuZCBbT3B0aW9uYWxdIFtmYWxzZSBieSBkZWZhdWx0XSBCb29sZWFuIHdoaWNoIGRldGVybWluZXMgd2V0aGVyIHRvIHNlbmRcbiAgICAgKiB0aGUgc3Vic2NyaWJlIGV2ZW50IG9yIG5vdC4gdXNlIGl0IHRvIHNldCBjYWxsYmFja3MgZm9yIGV2ZW50IHRoYXQgYXJlIGFscmVhZHkgc3Vic2NyaWJlZCB0byxcbiAgICAgKiBmb3IgaW5zdGFuY2Ugd2l0aCBncm91cCBzdWJzY3JpcHRpb25zXG4gICAgICovXG4gICAgc3Vic2NyaWJlKGV2ZW50TmFtZSwgY2FsbGJhY2ssIGRvbnRTZW5kID0gZmFsc2UpIHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSB7IGV2ZW50X25hbWU6ICdmdXJoYXRvcy5ldmVudC5hY3Rpb25zLkFjdGlvblJlYWxUaW1lQVBJU3Vic2NyaWJlJywgbmFtZTogZXZlbnROYW1lIH07XG4gICAgICAgIHRoaXMuZXZlbnRGdW5jdGlvbnNbZXZlbnROYW1lXSA9IGNhbGxiYWNrO1xuICAgICAgICBpZiAoIWRvbnRTZW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZW5kKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlcyB0byB0aGUgZ2l2ZW4gZXZlbnQgZ3JvdXBcbiAgICAgKiBAcGFyYW0gZ3JvdXBOdW1iZXIgTnVtYmVyKEFzc2lnbmVkIEVOVU0pIG9mIHRoZSBncm91cCB0aGF0IG5lZWRzIHRvIGJlIHN1YnNjcmliZWQgdG9cbiAgICAgKi9cbiAgICBzdWJzY3JpYmVHcm91cChncm91cE51bWJlcikge1xuICAgICAgICBjb25zdCBldmVudCA9IHsgZXZlbnRfbmFtZTogJ2Z1cmhhdG9zLmV2ZW50LmFjdGlvbnMuQWN0aW9uUmVhbFRpbWVBUElTdWJzY3JpYmUnLCBncm91cDogZ3JvdXBOdW1iZXIgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZChldmVudCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNheXMgYSBnaXZlbiB0ZXh0XG4gICAgICogQHBhcmFtIHRleHQgVGV4dCB3aGljaCBuZWVkcyB0byBiZSBzYWlkIGJ5IEZ1cmhhdFxuICAgICAqL1xuICAgIHNheSh0ZXh0KSB7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0geyBldmVudF9uYW1lOiAnZnVyaGF0b3MuZXZlbnQuYWN0aW9ucy5BY3Rpb25TcGVlY2gnLCB0ZXh0IH07XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoZXZlbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGltdWxhdGVzIHRoZSBzcGVlY2ggb2YgYSB1c2VyIGluIHRoZSBpbnRlcmFjdGlvbiBzcGFjZVxuICAgICAqIEBwYXJhbSB0ZXh0IFRleHQgd2hpY2ggbmVlZHMgdG8gYmUgc2FpZCBieSB0aGUgdXNlclxuICAgICAqL1xuICAgIHVzZXJTcGVlY2godGV4dCkge1xuICAgICAgICBjb25zdCBldmVudCA9IHsgZXZlbnRfbmFtZTogJ2Z1cmhhdG9zLmV2ZW50LnNlbnNlcy5TZW5zZVR5cGluZ0VuZCcsIG1lc3NhZ2VUZXh0OiB0ZXh0IH07XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoZXZlbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGltdWxhdGVzIFNlbnNlU3BlZWNoU3RhcnQgZXZlbnQuIENhbiBiZSB1c2VkIHRvIHN0aW11bGF0ZSB1c2VyIHNwZWVjaCB2aWEgdHlwaW5nXG4gICAgICovXG4gICAgdXNlclNwZWVjaFN0YXJ0KCkge1xuICAgICAgICBjb25zdCBldmVudCA9IHsgZXZlbnRfbmFtZTogJ2Z1cmhhdG9zLmV2ZW50LnNlbnNlcy5TZW5zZVR5cGluZ1N0YXJ0JyB9O1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKGV2ZW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgdGhlIGdpdmVuIGdlc3R1cmVcbiAgICAgKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoZSBnZXN0dXJlIHRoYXQgbmVlZHMgdG8gYmUgcGVyZm9ybWVkXG4gICAgICovXG4gICAgZ2VzdHVyZShuYW1lKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0geyBldmVudF9uYW1lOiAnZnVyaGF0b3MuZXZlbnQuYWN0aW9ucy5BY3Rpb25HZXN0dXJlJywgbmFtZSB9O1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKGV2ZW50KTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBGdXJoYXQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZnVyaGF0LWNvcmUvZGlzdC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/* no static exports found */
/* all exports used */
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_furhat_gui__ = __webpack_require__(/*! furhat-gui */ 0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_furhat_gui___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_furhat_gui__);\n\nlet reactions = {};\nlet currentlyEditingMessageId = null;\nlet isEmojiPickerOpen = false;\nconst emojiList = ['😀', '😂', '😊', '😎', '😜', '😍', '😘', '🥳', '👍', '👎'];\nlet furhat = null;\n\nconsole.log(\"i am loaded\")\n\n\n{__WEBPACK_IMPORTED_MODULE_0_furhat_gui___default()()\n    .then(connection => {\n        furhat = connection;\n        furhat.subscribe('furhatos.app.base_search_agent.DataDelivery', (data) => {\n            // Activates any time i received somethíng from the FH side! DataDelivery Bby\n            console.log(data)\n            if (data.messagesLog) {\n                displayChatReactMode(data.messagesLog);\n            }\n            else if (data.videoUrl) {\n                displayVideoMode(data.videoUrl)\n            }\n        })\n\n    })\n    .catch(console.error)\n}\n\n// Small update required: close the ready button (code might be available on the mac):\nfunction displayVideoMode(input) {\n\n    document.getElementById('chatContainer').innerHTML = '';\n    if (document.getElementById(\"readyButton\")) {document.getElementById(\"readyButtonContainer\").innerHTML = '';}\n\n    // Create a new video element\n    const video = document.createElement('video');\n\n    // Set the video's source\n    video.src = input;\n    video.controls = true;\n\n    // Set some optional attributes, like width and height\n    video.width = 640;   // You can adjust this value\n    video.height = 480;  // You can adjust this value\n\n    // Append the video element to the body of the document\n    // You can change 'document.body' to append it to a different element\n    document.getElementById(\"videoContainer\").innerHTML = video.outerHTML;\n}\n\nfunction displayChatReactMode(input) {\n\n    document.getElementById('videoContainer').innerHTML = '';\n    document.getElementById('chatContainer').innerHTML = '';\n\n    addMessagesToDOM(input)\n\n    if (!document.getElementById(\"readyButton\")) {\n        // Create a container for the button and separator\n        var readyButtonContainer = document.createElement(\"div\");\n        readyButtonContainer.id = \"readyButtonContainer\"; // Set an ID or class for styling if needed\n\n        // Create a new button element\n        var readyButton = document.createElement(\"button\");\n        readyButton.id = \"readyButton\"; // Set attributes for the button\n        readyButton.innerText = \"Ik ben klaar!\"; // You can change the button text here\n\n        // Create a separator\n        var separator = document.createElement(\"hr\");\n        separator.className = \"separator\";\n\n        // Append the separator and the button to the container\n        readyButtonContainer.appendChild(separator);\n        readyButtonContainer.appendChild(readyButton);\n\n        // Append the container to the body of the document\n        // You can change 'document.body' to append it to a different element\n        document.body.appendChild(readyButtonContainer);\n\n        // Add a click event listener to the button\n        readyButton.addEventListener('click', () => exportReactions());\n    }\n}\n\nfunction addMessagesToDOM(messagesJson) {\n    console.log(messagesJson)\n    var parsedData = JSON.parse(messagesJson)\n    console.log(parsedData.messages[0].text)\n\n    parsedData.messages.forEach(message => {\n        // Create divs and other elements\n        let bubbleWrapper = document.createElement('div');\n        bubbleWrapper.className = 'bubbleWrapper';\n        let inlineContainer = document.createElement('div');\n\n        if (message.who == \"robot\") {\n            inlineContainer.className = 'inlineContainer';\n\n            let icon = document.createElement('img');\n            icon.className = 'inlineIcon';\n            icon.src = 'src/rb.png'; // Adjust the source as needed\n\n            let bubble = document.createElement('div');\n            bubble.className = 'otherBubble other';\n            bubble.id = message.id;\n            bubble.textContent = message.text;\n            bubble.addEventListener('click', () => openEmojiPicker(message.id));\n\n            let reaction = document.createElement('div');\n            reaction.id = message.emojiId;\n            reaction.className = 'reaction';\n\n            let emojiOverlay = document.createElement('div');\n            emojiOverlay.className = 'emojiOverlay';\n\n            // Append child elements\n            reaction.appendChild(emojiOverlay);\n            bubble.appendChild(reaction);\n            inlineContainer.appendChild(icon);\n            inlineContainer.appendChild(bubble);\n            bubbleWrapper.appendChild(inlineContainer);\n        }\n\n        if (message.who == \"kid\") {\n            inlineContainer.className = 'inlineContainer own';\n            let icon = document.createElement('img');\n            icon.className = 'inlineIcon';\n            icon.src = 'src/jij.png'; // Adjust the source as needed\n\n            let bubble = document.createElement('div');\n            bubble.className = 'ownBubble own';\n            bubble.id = message.id;\n            bubble.textContent = message.text;\n\n            inlineContainer.appendChild(icon);\n            inlineContainer.appendChild(bubble);\n            bubbleWrapper.appendChild(inlineContainer);\n        }\n\n        reactions[message.id] = {\n            reaction: message.emojiId,\n            text: '',\n            utterance: message.text, // Store the text it was based on\n            startTime: message.startTime, // Add a startTime property if needed\n            who: message.who// Add other properties as needed\n        };\n\n        // Append to document\n        // Assuming bubbleWrapper is already defined and you want to append it to a div with the id 'chat'\n        var chatDiv = document.getElementById('chatContainer');\n        chatDiv.appendChild(bubbleWrapper);\n        updateSingleReaction(message.id);\n    });\n}\n\nfunction openEmojiPicker(messageId) {//, existingReaction = '') {\n    // BLUR CODE\n    // Set the currently editing message ID globally\n    currentlyEditingMessageId = messageId;\n\n    // Apply blur to other elements\n    const allMessages = document.querySelectorAll('.otherBubble, .ownBubble, .inlineIcon, .inlineContainer.own, .readyButton');\n    allMessages.forEach(message => {\n        if (message.id !== messageId) {\n            message.classList.add('blur');\n        }\n    });\n    ///// END of blur CODE\n\n    const readyButton = document.getElementById('readyButton');\n    if (readyButton) {\n        readyButton.style.display = 'none';\n    }\n\n    // Get the position of the selected message\n    const selectedMessage = document.getElementById(messageId);\n    if (!selectedMessage) {\n        return; // Handle the case where the selected message is not found\n    }\n\n    const selectedMessageRect = selectedMessage.getBoundingClientRect();\n\n    // Calculate the position for the emoji picker\n    const emojiPicker = document.getElementById('emojiPicker');\n    if (emojiPicker) {\n        emojiPicker.style.display = 'block';\n        emojiPicker.dataset.messageId = messageId;\n        let topPosition = selectedMessageRect.top + 120; // Initial offset, adjust as needed\n        let leftPosition = selectedMessageRect.right + 232; // Adjust the offset as needed\n\n        // Ensure the emoji picker does not exceed the screen height\n        const screenHeight = window.innerHeight;\n        const pickerHeight = emojiPicker.offsetHeight;\n\n        if (topPosition + pickerHeight > screenHeight) {\n            topPosition = screenHeight - pickerHeight;\n        }\n        const minimumTopOffset = 20; // Adjust as needed\n        topPosition = Math.max(minimumTopOffset, topPosition);\n\n\n        // Set the final position of the emoji picker\n        emojiPicker.style.top = `${Math.max(0, topPosition)}px`;\n        emojiPicker.style.left = `${Math.max(0, leftPosition)}px`;\n    }\n\n    if (!reactions[messageId]) {\n        reactions[messageId] = { reaction:'' };\n    }\n\n    const existingReaction = reactions[messageId].reaction;\n\n    const emojiContainer = document.querySelector('.emojiContainer');\n    emojiContainer.innerHTML = '';\n\n    emojiList.forEach(emoji => {\n        const emojiSpan = document.createElement('span');\n        emojiSpan.classList.add('emoji');\n        emojiSpan.textContent = emoji;\n        emojiSpan.dataset.emoji = emoji;\n\n        if (existingReaction === emoji) {\n            emojiSpan.classList.add('selected');\n        }\n\n        emojiSpan.onclick = () => selectEmoji(emoji);\n        emojiContainer.appendChild(emojiSpan);\n    });\n\n    const existingText = reactions[messageId].text || '';\n\n    const reactionTextField = document.getElementById('additionalTextField');\n    if (reactionTextField) {\n        reactionTextField.value = existingText;\n    }\n\n    let rem = document.getElementById(\"removeButton\")\n    rem.addEventListener('click', () => deselectEmoji());\n\n    let close = document.getElementById(\"closeButton\")\n    close.addEventListener('click', () => closeEmojiPicker());\n\n    isEmojiPickerOpen = true;\n\n}\n\nfunction closeEmojiPicker() {\n    const messageId = document.getElementById('emojiPicker').dataset.messageId;\n    const reactionTextField = document.getElementById('additionalTextField');\n\n    if (messageId && reactionTextField) {\n        reactions[messageId].text = reactionTextField.value;\n    }\n\n    updateReactions();\n\n    // Remove .editing class from the currently edited message\n    const currentlyEditingMessage = document.getElementById(currentlyEditingMessageId);\n    if (currentlyEditingMessage) {\n        currentlyEditingMessage.classList.remove('editing');\n    }\n\n    // Reset the currently editing message ID globally\n    currentlyEditingMessageId = null;\n\n    // Remove blur from other elements\n    const blurElements = document.querySelectorAll('.blur');\n    blurElements.forEach(element => {\n        element.classList.remove('blur');\n    });\n    // END OF BLUR CODE\n\n    const readyButton = document.getElementById('readyButton');\n    if (readyButton) {\n        readyButton.disabled = false;\n        readyButton.style.display = 'block';\n    }\n\n    const emojiPicker = document.getElementById('emojiPicker');\n    emojiPicker.style.display = 'none';\n\n    updateReactions();\n\n    isEmojiPickerOpen = false;\n}\n\n\nfunction selectEmoji(emoji) {\n    const messageId = document.getElementById('emojiPicker').dataset.messageId;\n    const emojiContainer = document.querySelector('.emojiContainer');\n\n    // Remove the 'selected' class from all emojis\n    emojiContainer.querySelectorAll('.emoji').forEach(el => el.classList.remove('selected'));\n\n    // Add the 'selected' class to the clicked emoji\n    const selectedEmoji = emojiContainer.querySelector(`[data-emoji=\"${emoji}\"]`);\n    if (selectedEmoji) {\n        selectedEmoji.classList.add('selected');\n    }\n    reactions[messageId].reaction = emoji; // new\n    updateReactions();\n}\n\nfunction deselectEmoji() {\n    const messageId = document.getElementById('emojiPicker').dataset.messageId;\n    const emojiContainer = document.querySelector('.emojiContainer');\n    const reactionTextField = document.getElementById('additionalTextField');\n    // Remove the 'selected' class from all emojis\n    emojiContainer.querySelectorAll('.emoji').forEach(el => el.classList.remove('selected'));\n\n    // clear textfield\n    reactionTextField.value = '';\n\n    reactions[messageId] = {\n        emoji: \"\", // Set the emoji to an empty string\n        text: \"\",  // Set the text to an empty string\n    };\n    closeEmojiPicker();\n}\n\nfunction updateReactions() {\n    const messageId = document.getElementById('emojiPicker').dataset.messageId;\n    const message = document.getElementById(messageId);\n    const emojiOverlay = message ? message.querySelector('.emojiOverlay') : null;\n\n    if (emojiOverlay) {\n        const { reaction } = reactions[messageId];\n\n        if (reaction) {\n            emojiOverlay.textContent = reaction;\n            emojiOverlay.style.display = 'block';\n        } else {\n            emojiOverlay.textContent = '';\n            emojiOverlay.style.display = 'none';\n        }\n    }\n}\n\nfunction updateSingleReaction(messageId) {\n    const message = document.getElementById(messageId);\n    const emojiOverlay = message ? message.querySelector('.emojiOverlay') : null;\n\n    if (emojiOverlay) {\n        const { reaction } = reactions[messageId];\n\n        if (reaction) {\n            emojiOverlay.textContent = reaction;\n            emojiOverlay.style.display = 'block';\n        } else {\n            emojiOverlay.textContent = '';\n            emojiOverlay.style.display = 'none';\n        }\n    }\n}\n\n\nfunction exportReactions() {\n    console.log(\"readyButton pressed\");\n    const jsonReactions = JSON.stringify(reactions);\n\n    furhat.send({\n        event_name: \"ClickButton\",\n        data: jsonReactions\n    })\n    console.log(jsonReactions);\n}\n\n\n// toggle the blur class on the body\nfunction addBlur() {\n    document.body.classList.add('blur');\n}\n\nfunction removeBlur() {\n    document.body.classList.remove('blur');\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n");

/***/ })
/******/ ]);